@{
    Layout = "_AccountLayout";
}

@using BookTalk.Shared.ViewModels.Account
@using BookTalk.Client.Controllers

@model SigninViewModel?

@{
    ViewData["Title"] = "Login";
}

@using (Html.BeginForm(nameof(AccountController.SignIn), nameof(AccountController).Replace("Controller", ""), FormMethod.Post, new { @class = "form-container custom-base-container px-4 py-3" }))
{
    <div class="form-group">
        @Html.LabelFor(m => m.Id, new { @class = "control-label", @for = "txtFormID" })
        @Html.TextBoxFor(m => m.Id, new { @class = "form-control", @id = "txtFormID", @placeholder = "Your ID" })
        @Html.ValidationMessageFor(m => m.Id, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "control-label", @for = "txtFormPassword" })
        @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "txtFormPassword", @placeholder = "Password" })
        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
    </div>

    <div class="dropdown-divider"></div>
    <a class="dropdown-item" asp-controller="@nameof(AccountController).Replace("Controller", "")" asp-action="@nameof(AccountController.Signup)">New around here? Sign up</a>
    <a id="btnFindAccount" class="dropdown-item" href="#">Forgot password?</a>
    <button type="submit" class="btn btn-primary float-right">Sign in</button>
}



<!-- 사용자 유효성 검사 팝업 -->
<div id="checkModal" class="modal">
    <div class="modal-content">
        <span class="closeCheck">&times;</span>
        <div class="form-group">
            @Html.LabelFor(m => m.FId, new { @class = "control-label", @for = "txtFID1" })
            @Html.TextBoxFor(m => m.FId, new { @class = "form-control", @id = "txtFID1", @placeholder = "Your ID" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.FName, new { @class = "control-label", @for = "txtFName1" })
            @Html.TextBoxFor(m => m.FName, new { @class = "form-control", @id = "txtFName1", @placeholder = "Your Name" })
        </div>

        <div class="form-group"">
            <button id="btnCheckUser" class="btn btn-primary">확인</button>
        </div>
    </div>
</div>



<!-- 비밀번호 재설정 팝업 -->
<div id="resetPasswordModal" class="modal">
    <div class="modal-content">
        <span class="closeResetPassword">&times;</span>
        <div class="form-group">
            @Html.LabelFor(m => m.FId, new { @class = "control-label", @for = "txtFID2" })
            @Html.TextBoxFor(m => m.FId, new { @class = "form-control", @id = "txtFID2", @placeholder = "Your ID", @disabled = "disabled" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.FPassword, new { @class = "control-label", @for = "txtPassword" })
            @Html.PasswordFor(m => m.FPassword, new { @class = "form-control", @id = "txtPassword", @placeholder = "Password" })
            @Html.ValidationMessageFor(m => m.FPassword, "", new { @id = "passwordError", @class = "text-danger" })
        </div>

        <div class="form-group button-container">
            <button id="btnResetPassword" class="btn btn-primary">비밀번호 재설정</button>
        </div>
    </div>
</div>



<script>
    window.onload = function () {
        OnLoadView();
    }

    function OnLoadView() {
        let successMessage = "@Html.Raw(TempData["SuccessMessage"])"; // 로그인 성공 메세지
        let errorMessage = "@Html.Raw(ViewBag.ErrorMessage)"; // 오류 메세지

        if (successMessage) {
            alert(successMessage);
        }
        else if (errorMessage) {
            alert(errorMessage);
        }
    }

    // 모달 가져오기
    var checkModal = document.getElementById("checkModal");
    var resetPasswordModal = document.getElementById("resetPasswordModal");

    // 버튼 가져오기
    var btnFindAccount = document.getElementById("btnFindAccount");
    var btnCheckUser = document.getElementById("btnCheckUser");
    var btnResetPassword = document.getElementById("btnResetPassword");

    // 닫기 버튼 가져오기
    var spanCheck = document.getElementsByClassName("closeCheck")[0];
    var spanResetPassword = document.getElementsByClassName("closeResetPassword")[0];


    btnFindAccount.onclick = function () {
        checkModal.style.display = "block";
        document.getElementById("txtFID1").value = "";
        document.getElementById("txtFName1").value = "";
        document.getElementById("txtFID2").value = "";
        document.getElementById("txtPassword").value = "";
        document.getElementById("passwordError").innerText = "";
    }


    // 사용자 유효성 검사
    btnCheckUser.onclick = function () {
        let userId = document.getElementById("txtFID1").value;
        let userName = document.getElementById("txtFName1").value;

        fetch("/Account/CheckValidUser", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                FId: userId,
                FName: userName,
            })
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            }
            return response.json().then(err => { throw new Error(err.message); });
        })
        .then(data => {
            checkModal.style.display = "none";
            resetPasswordModal.style.display = "block";
            document.getElementById("txtFID2").value = userId
        })
        .catch(error => {
            alert(error.message);
        });
    }


    // 비밀번호 재설정
    btnResetPassword.onclick = function () {
        let userId = document.getElementById("txtFID2").value;
        let userPassword = document.getElementById("txtPassword").value;

        fetch("/Account/ResetPassword", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                FId: userId,
                FPassword: userPassword,
            })
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            }
            return response.json().then(err => { throw new Error(err.message); });
        })
        .then(data => {
            if (data.validMessage) {
                // 유효성 검사 실패
                document.getElementById("passwordError").innerText = data.validMessage;
            }
            else {
                alert(data.message)
                window.location.href = '/Account/Signin';
            }
        })
        .catch(error => {
            alert(error.message);
        });
    }


    // 사용자가 닫기 버튼(X)을 클릭하면 모달 닫기
    spanCheck.onclick = function () {
        checkModal.style.display = "none";
    }


    spanResetPassword.onclick = function () {
        resetPasswordModal.style.display = "none";
    }


    // 사용자가 모달 외부를 클릭하면 모달 닫기
    window.onclick = function (event) {
        if (event.target == checkModal || event.target == resetPasswordModal) {
            checkModal.style.display = "none";
            resetPasswordModal.style.display = "none";
        }
    }
</script>
