@using BookTalk.Shared.ViewModels.Review
@using BookTalk.Client.Controllers
@model ReviewPostViewModel

@using (Html.BeginForm(nameof(ReviewController.Post), nameof(ReviewController).Replace("Controller", ""), FormMethod.Post, new { @class = "container mt-4" }))
{
    @Html.HiddenFor(model => model.Id, new { @id = "hidId", @readonly = "readonly" })
    @Html.HiddenFor(model => model.Isbn13, new { @id = "hidIsbn13", @readonly = "readonly" })
    @Html.HiddenFor(model => model.Isbn10, new { @id = "hidIsbn10", @readonly = "readonly" })
    @Html.HiddenFor(model => model.Cover, new { @id = "hidCover", @readonly = "readonly" })

    <div class="row d-flex align-items-stretch">
        <div class="col-md-8">
            <div class="card h-100">
                <div class="card-body">
                    <div class="mb-3">
                        @Html.LabelFor(m => m.ReviewTitle, new { @class = "control-label", @for = "txtFormReviewTitle" })
                        @Html.TextBoxFor(m => m.ReviewTitle, new { @class = "form-control", @id = "txtFormReviewTitle", @placeholder = "Review Title" })
                        @Html.ValidationMessageFor(m => m.ReviewTitle, "", new { @class = "text-danger" })
                    </div>
                    <div class="mb-3">
                        @Html.LabelFor(m => m.BookTitle, new { @class = "control-label", @for = "txtFormBookTitle" })
                        @Html.TextBoxFor(m => m.BookTitle, new { @class = "form-control", @id = "txtFormBookTitle", @placeholder = "Book Title", @readonly = "readonly", @style = "background-color: white;" })
                        @Html.ValidationMessageFor(m => m.BookTitle, "", new { @class = "text-danger" })
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.Author, new { @class = "control-label", @for = "txtFormAuthor" })
                                @Html.TextBoxFor(m => m.Author, new { @class = "form-control", @id = "txtFormAuthor", @placeholder = "Book Author", @readonly = "readonly", @style = "background-color: white;" })
                                @Html.ValidationMessageFor(m => m.Rating, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="mb-3">
                                @Html.LabelFor(m => m.Rating, new { @class = "control-label", @for = "cboFormRate" })
                                @Html.DropDownListFor(m => m.Rating, Model.Rates, new { @class = "form-select", @id = "cboFormRate" })
                                @Html.ValidationMessageFor(m => m.Rating, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 d-flex justify-content-center align-items-center">
                <div class="card-body d-flex justify-content-center align-items-center">
                    <img src="@(Model.Cover)" id="bookImg" class="img-fluid user-image" style="max-width: 100%; max-height: 100%;" alt="">
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="card mt-3">
                <div class="card-body">
                    @Html.TextAreaFor(m => m.Content, new { @class = "form-control review-content", @id = "txaFormContent", placeholder = "리뷰 내용을 작성하세요.", style = "height: calc(85vh);" })
                    @Html.ValidationMessageFor(m => m.Content, "", new { @class = "text-danger" })
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
                        <button class="btn btn-primary" type="submit">리뷰 제출하기</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



<div id="bookModal" class="modal">
    <div class="modal-content">
        <span id="close" class="close">&times;</span>

        <!-- 검색 폼 -->
        <div class="form-group">
            <div class="form-group">
                @Html.LabelFor(m => m.Keyword, new { @class = "control-label", @for = "txtSearch" })
                @Html.TextBoxFor(m => m.Keyword, new { @class = "form-control", @id = "txtSearch", @placeholder = "도서 검색..." })
            </div>
        </div>

        <div class="form-group mt-2">
            <button id="btnPopSearch" class="btn btn-primary">검색</button>
        </div>

        <!-- 검색 결과 표시 -->
        <div id="searchResults" class="mt-4"></div>

        <div class="row">
            <nav id="popPage" class="user-page" aria-label="Page">
                <ul id="pagination-container" class="pagination">
                    <!-- Page - 2 ~ Page + 2 -->
                    @for (int i = Model.Page - 2; i < Model.Page + 3; i++)
                    {
                        if (i > 0)
                        {
                            <li class="page-item">
                                <a class="page-link" data-page="@i">@i</a>
                            </li>
                        }
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>



@if (!string.IsNullOrEmpty(ViewBag.TinyMCEApiKey))
{
    <script src="https://cdn.tiny.cloud/1/@ViewBag.TinyMCEApiKey/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        tinymce.init({
            selector: '#txaFormContent',
            statusbar: false
        });
    </script>
}

<script>
    window.onload = function () {
        OnLoadView();
    }

    function OnLoadView() {
        var errorMessage = "@Html.Raw(ViewBag.ErrorMessage)";

        if (errorMessage) {
            @{ViewBag.ErrorMessage = "";};
            alert(errorMessage);
        }
    }



    var txtFormBookTitle = document.getElementById("txtFormBookTitle");
    var bookModal = document.getElementById("bookModal");
    var spanClose = document.getElementById("close");
    var btnPopSearch = document.getElementById("btnPopSearch");
    var popPpage = document.getElementById("popPage");
    var searchResults = document.getElementById("searchResults");
    var keyword = "";


    //  도서 텍스트 박스 클릭
    txtFormBookTitle.onclick = function () {
        if (!document.getElementById('hidId').value) {
            bookModal.style.display = "block";
            popPpage.style.display = "none";
        }
    }


    // 팝업창 검색 버튼 클릭
    btnPopSearch.onclick = function () {
        keyword = document.getElementById("txtSearch").value;
        getRequestBooks(1)
    }


    // 팝업창에서 페이지 버튼 클릭 이벤트
    document.addEventListener('DOMContentLoaded', function () {
        // pagination-container 안에 있는 클래스가 page-link인 a 태그
        var pageLinks = document.querySelectorAll('#pagination-container a.page-link');

        // 로컬 스토리지에 데이터가 있는지 확인 후 있으면 데이터 세팅(글 수정 or 도서 상세에서 리뷰 작성 버튼 클릭)
        setLocalStorage();

        // 각 요소에 대해 클릭 이벤트 리스너 추가
        pageLinks.forEach(function (link) {
            link.addEventListener('click', function (event) {
                // 페이지 이동(기본 동작) 방지
                event.preventDefault();

                // 클릭된 요소의 'data-page' 속성 값
                var selectedPage = this.getAttribute('data-page');

                getRequestBooks(selectedPage)
            });
        });
    });


    // 사용자가 닫기 버튼(X)을 클릭하면 모달 닫기
    spanClose.onclick = function () {
        closePopup();
    }


    // 사용자가 모달 외부를 클릭하면 모달 닫기
    window.onclick = function (event) {
        if (event.target == bookModal) {
            closePopup();
        }
    }


    searchResults.onclick = function (event) {
        // event.target : 이벤트가 발생한 요소
        // 이벤트가 발생한 요소로부터 clickable 클래스를 가지는 가장 가까운 조상을 찾는다.
        var clickedElement = event.target.closest(".book-title");
        if (clickedElement) {
            txtFormBookTitle.value = clickedElement.getAttribute("data-title");
            document.getElementById("txtFormAuthor").value = clickedElement.getAttribute("data-author");
            document.getElementById("hidIsbn13").value = clickedElement.getAttribute("data-isbn13");
            document.getElementById("hidIsbn10").value = clickedElement.getAttribute("data-isbn10");
            document.getElementById("hidCover").value = clickedElement.getAttribute("data-cover");
            document.getElementById("bookImg").src = clickedElement.getAttribute("data-cover");
            closePopup();
        }
    }


    function getRequestBooks(page) {
        var query = `keyword=${keyword}&page=${page}`

        fetch(`/Book/SearchListJson?${query}`, {
            method: "GET",
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                return response.json().then(err => { throw new Error(err.message); });
            })
            .then(data => {
                if (data.item && data.item.length > 0) {
                    searchResults.innerHTML = data.item.map(book => {
                        return `
                        <div class="book-item" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <div class="book-title" data-title="${book.title}" data-cover="${book.cover}" data-author="${book.author}" data-isbn13="${book.isbn13}" data-isbn10="${book.isbn}" onmouseover="this.style.textDecoration='underline'; this.style.color='blue';" onmouseout="this.style.textDecoration='none'; this.style.color='black';">
                                <a href="javascript:void(0);" style="color: inherit; text-decoration: none;">
                                    <p>${book.title}</p>
                                </a>
                            </div>
                            <div class="book-author" style="flex: 1; text-align: right; max-height: 3em; overflow: hidden; text-overflow: ellipsis; white-space: normal; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                <p>${book.author}</p>
                            </div>
                        </div>
                        <hr style="margin-top: 0;">`;
                    }).join('');
                    // * javascript:void(0) : 링크 기본 동작 방지

                    popPpage.style.display = "block"
                    if (page >= 1) {
                        updatePagination(page, data.minPage, data.maxPage, getRequestBooks);
                    }
                }
                else {
                    searchResults.innerHTML = '<p>검색 결과가 없습니다.</p>';
                }
            })
            .catch(error => {
                alert(error.message);
            });
    }


    function closePopup() {
        bookModal.style.display = "none";
        keyword = "";
        searchResults.innerHTML = "";
        document.getElementById("txtSearch").value = "";
    }


    function decodeHtmlEntities(encodedString) {
        var textArea = document.createElement('textarea');
        textArea.innerHTML = encodedString;
        return textArea.value;
    }


    function decodeHtmlEntities(encodedString) {
        // 가상의 DOM 요소에서는 자동으로 디코딩 처리된다.
        var textArea = document.createElement('textarea');
        textArea.innerHTML = encodedString;
        return textArea.value;
    }

    function setLocalStorage() {
        const reviewData = JSON.parse(localStorage.getItem('reviewToEdit'));

        if (reviewData) {
            // 폼 필드에 데이터 채우기
            document.getElementById('hidId').value = reviewData.id ? decodeHtmlEntities(reviewData.id) : "";
            document.getElementById('txtFormReviewTitle').value = reviewData.title ? decodeHtmlEntities(reviewData.title) : "";
            document.getElementById('txtFormBookTitle').value = reviewData.bookName ? decodeHtmlEntities(reviewData.bookName) : "";
            document.getElementById('txtFormAuthor').value = decodeHtmlEntities(reviewData.author);
            document.getElementById('cboFormRate').value = reviewData.rating ? reviewData.rating : "5";
            document.getElementById('txaFormContent').value = reviewData.content ? decodeHtmlEntities(reviewData.content) : "";
            document.getElementById('hidIsbn13').value = reviewData.isbn13 ? decodeHtmlEntities(reviewData.isbn13) : "";
            document.getElementById('hidIsbn10').value = reviewData.isbn10 ? decodeHtmlEntities(reviewData.isbn10) : "";
            document.getElementById("bookImg").src = decodeHtmlEntities(reviewData.cover);

            if (reviewData.id) {
                document.getElementById('txtFormReviewTitle').readOnly = true;
                document.getElementById('txtFormBookTitle').readOnly = true;
                document.getElementById('txtFormAuthor').readOnly = true;
                document.getElementById('cboFormRate').disabled = true;
            }

            // 사용 후 localStorage에서 해당 항목 삭제
            localStorage.removeItem('reviewToEdit');
        }
    }
</script>



