@using BookTalk.Shared.ViewModels.Review
@model ReviewViewModel

@Html.HiddenFor(model => model.Id, new { @id = "hidId", @readonly = "readonly" })
@Html.HiddenFor(model => model.CurrentUserId, new { @id = "hidCurrentUserId", @readonly = "readonly" })

<div class="form-container custom-base-container">
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-8">
                <h2>@Model.Title</h2>
                <hr />
                <p><strong>작성자 :</strong> @Model.UserId</p>
                <p><strong>작성일 :</strong> @Model.CreateDate</p>
                <p><strong>도서명 :</strong> @Model.BookName</p>
                <p><strong>카테고리 :</strong> @Model.CategoryName</p>
                <p><strong>작가 :</strong> @Model.Author</p>
                <p><strong>출판사 :</strong> @Model.Publisher</p>
                <p><strong>출간일 :</strong> @Model.PubDate</p>
                <p><strong>평점 :</strong> @(Model.Rating == 0 ? "-" : Model.Rating.ToString())</p>
            </div>

            <div class="col-md-4 d-flex justify-content-center">
                <img src="@Model.Cover" class="img-fluid user-image" alt="책 표지">
            </div>

            <hr />
            <p>@Html.Raw(Model.Content)</p>            

            <div class="mt-4">
                <h4>댓글 달기</h4>
                <div class="form-group">
                    <textarea id="commentText" class="form-control" rows="3" placeholder="댓글을 입력하세요..."></textarea>
                </div>
                <button id="btnComment" type="submit" class="btn btn-primary">댓글 작성</button>

                <div id="commentsContainer">
                </div>
            </div>
        </div>

        <div class="row">
            <nav aria-label="Page navigation example">
                <ul id="pagination-container" class="pagination">
                    @for (int i = Model.Page.Page - 2; i < Model.Page.Page + 3; i++)
                    {
                        if (i >= Model.Page.MinPage && i <= Model.Page.MaxPage)
                        {
                            if (i == Model.Page.Page)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" data-page="@i" style="color:black; background-color:transparent; pointer-events:none;">@i</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0)" data-page="@i">@i</a>
                                </li>
                            }
                        }
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
     window.onload = function () {
         OnLoadView();
         getRequestComment(1)
     }

    function OnLoadView() {
        var errorMessage = "@Html.Raw(ViewBag.ErrorMessage)";

        if (errorMessage) {
            alert(errorMessage);
        }
    }


    var btnComment = document.getElementById("btnComment");
    btnComment.onclick = function () {
        let reviewId = document.getElementById("hidId").value;
        let commentText = document.getElementById("commentText").value;

        fetch('/Review/CreateComment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                reviewId: reviewId,
                content: commentText
            }),
        })
        .then(response => {
            if (response.ok) {
                return response.json().then(data => {
                    document.getElementById("commentText").value = "";
                    const newComment = document.createElement("div");
                    newComment.innerHTML = getCommentElementString(data, "s");
                    document.getElementById("commentsContainer").appendChild(newComment);
                });
            } else if (response.status === 401) {
                // Unauthorized 응답(401)
                return response.json().then(err => {
                    alert(err.message);
                    window.location.href = "/Account/Signin";
                });
            } else {
                return response.json().then(err => { throw new Error(err.message); });
            }
        })
        .catch(error => {
            alert(error.message)
        });
    }


    document.addEventListener('click', function (e) {
        if (e.target.matches('.edit-comment')) {
            const commentId = e.target.getAttribute('data-comment-id');
            console.log('수정 버튼 클릭됨, 댓글 ID:', commentId);
        } else if (e.target.matches('.delete-comment')) {
            const commentId = e.target.getAttribute('data-comment-id');
            console.log('삭제 버튼 클릭됨, 댓글 ID:', commentId);
        }
    });


    document.addEventListener('DOMContentLoaded', function () {
        var pageLinks = document.querySelectorAll('#pagination-container a.page-link');

        pageLinks.forEach(function (link) {
            link.addEventListener('click', function (event) {
                event.preventDefault();
                let reviewId = document.getElementById("hidId").value;                
                let selectedPage = this.getAttribute('data-page');
                getRequestComment(reviewId, selectedPage);
            });
        });
    });


    function getRequestComment(page) {
        let baseUrl = "@(ViewBag.baseUrl)"
        let reviewId = document.getElementById("hidId").value;
        let url = `${baseUrl}/api/Review/GetComments?reviewId=${reviewId}&page=${page}`
        let commentsContainer = document.getElementById("commentsContainer");
        
        fetch(url, {
            method: "GET",
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                return response.json().then(err => { throw new Error(err.message); });
            })
            .then(data => {
                if (data.data && data.data.comments.length > 0) {
                    commentsContainer.innerHTML = data.data.comments.map(item => {
                        return getCommentElementString(item, "@(Model.UserId)", document.getElementById("hidCurrentUserId").value);
                    }).join(''); 

                    if (page >= 1) {
                        updatePagination(page, data.data.page.minPage, data.data.page.maxPage, getRequestComment);
                    }
                } else {
                    commentsContainer.innerHTML = '<p>검색 결과가 없습니다.</p>';
                }
            })
            .catch(error => {
                alert(error.message);
            });

    }


    
</script>
